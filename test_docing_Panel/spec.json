{
  "consumes": [
    "application/json"
  ], 
  "definitions": {
    "APIError": {
      "description": "An APIError communicates both general and field-specific errors. General errors include issues with core API usage as well as conflicts that involve more than one field. Field-specific errors correspond to an individual query parameter or request body attribute. Errors referencing nested fields will be dot-delimited (e.g. user.groups.0.name).", 
      "properties": {
        "field": {
          "additionalProperties": {
            "$ref": "#/definitions/Errors"
          }, 
          "type": "object"
        }, 
        "general": {
          "$ref": "#/definitions/Errors"
        }
      }, 
      "required": [
        "general", 
        "field"
      ], 
      "type": "object"
    }, 
    "AndFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/Filter"
        }, 
        {
          "properties": {
            "config": {
              "items": {
                "$ref": "#/definitions/Filter"
              }, 
              "type": "array"
            }
          }, 
          "required": [
            "config"
          ], 
          "type": "object"
        }
      ]
    }, 
    "Asset": {
      "description": "Item asset metadata.", 
      "properties": {
        "_links": {
          "allOf": [
            {
              "$ref": "#/definitions/SelfLink"
            }, 
            {
              "properties": {
                "activate": {
                  "description": "If present, RFC 3986 URI indicating where an authenticated user may trigger activation of this asset via a POST request.\n\nA 202 response indicates the activation request has been accepted. A 204 response indicates the asset is already active. After successful activation, this asset will have a non-empty location.", 
                  "type": "string"
                }, 
                "type": {
                  "description": "The RFC 3986 URI describing the asset type.", 
                  "type": "string"
                }
              }, 
              "type": "object"
            }
          ], 
          "description": "Links to related endpoints.", 
          "type": "object"
        }, 
        "_permissions": {
          "description": "An array of permissons the authenticated user has to the item.", 
          "items": {
            "enum": [
              "download"
            ], 
            "type": "string"
          }, 
          "type": "array", 
          "uniqueItems": true
        }, 
        "expires_at": {
          "description": "If present, RFC 3339 timestamp indicating when this asset will become inactive and will require reactivation.", 
          "format": "date-time", 
          "type": "string"
        }, 
        "location": {
          "description": "If present, RFC 3986 URI that indicates a location that will yield image data. Consult the documentation of the asset type to understand how to use this URI.", 
          "type": "string"
        }, 
        "status": {
          "description": "Current status of the asset.\n\nInactive - Asset is not currently available for download, but may be after activation.\n\nActivating - Asset is currently undergoing activation, and may be available for download shortly.\n\nActive - Asset has been activated, and may currently be available for download if the authentication context permits.", 
          "enum": [
            "inactive", 
            "activating", 
            "active"
          ], 
          "type": "string"
        }, 
        "type": {
          "description": "Type identifier of the asset.", 
          "type": "string"
        }
      }, 
      "required": [
        "status", 
        "type", 
        "_links", 
        "_permissions"
      ], 
      "type": "object"
    }, 
    "AssetType": {
      "properties": {
        "_links": {
          "allOf": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ], 
          "description": "Links to related endpoints.", 
          "type": "object"
        }, 
        "display_description": {
          "description": "Human-readable description of the asset type.", 
          "type": "string"
        }, 
        "display_name": {
          "description": "Human-readable name of the asset type.", 
          "type": "string"
        }, 
        "id": {
          "description": "Asset type identifier.", 
          "type": "string"
        }, 
        "md5_digest": {
          "description": "md5 digest of the asset type used to determine if the asset has changed.", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "AssetTypePage": {
      "properties": {
        "_links": {
          "allOf": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ], 
          "description": "Links to related endpoints.", 
          "type": "object"
        }, 
        "asset_types": {
          "items": {
            "$ref": "#/definitions/AssetType"
          }, 
          "type": "array"
        }
      }, 
      "type": "object"
    }, 
    "AssetsLink": {
      "properties": {
        "assets": {
          "description": "RFC 3986 URI representing the canonical location of the assets subcollection.", 
          "type": "string"
        }
      }, 
      "required": [
        "assets"
      ]
    }, 
    "Clip": {
      "description": "A Clip is a request to clip a scene to an AOI. It may include a webhook for a callback when the clip operation has completed.", 
      "properties": {
        "_links": {
          "$ref": "#/definitions/ClipLinks"
        }, 
        "aoi": {
          "description": "The geojson representation of the clipped region that has either been requested to be performed on the set of targets, or has been depending on the state of the operation.", 
          "format": "geojson", 
          "type": "object"
        }, 
        "created_on": {
          "description": "The UTC date this Clip request was created.", 
          "format": "date-time", 
          "type": "string"
        }, 
        "id": {
          "description": "A UUID to uniquely identify this Clip request.", 
          "format": "uuid", 
          "type": "string"
        }, 
        "last_modified": {
          "description": "The UTC date this Clip request was last modified.", 
          "format": "date-time", 
          "type": "string"
        }, 
        "state": {
          "description": "The current state of this clip request.", 
          "type": "string"
        }, 
        "targets": {
          "description": "The target imagery from the Data API to apply the Clip operation on.", 
          "items": {
            "$ref": "#/definitions/Product"
          }, 
          "type": "array"
        }, 
        "taskgroup": {
          "description": "Optional debugging information.", 
          "type": "object"
        }
      }, 
      "required": [
        "targets", 
        "aoi"
      ], 
      "type": "object"
    }, 
    "ClipLinks": {
      "properties": {
        "_self": {
          "description": "The canonical link to this Clip request.", 
          "type": "string"
        }, 
        "results": {
          "description": "The canonical links to this Clip's results.", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }, 
      "type": "object"
    }, 
    "ClipListLinks": {
      "properties": {
        "_self": {
          "description": "The canonical link to this Clip request.", 
          "type": "string"
        }, 
        "next": {
          "description": "The next page of Clip requests.", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "ClipListPage": {
      "properties": {
        "_links": {
          "$ref": "#/definitions/ClipListLinks"
        }, 
        "clips": {
          "items": {
            "$ref": "#/definitions/Clip"
          }, 
          "type": "array"
        }
      }, 
      "type": "object"
    }, 
    "ClipRequest": {
      "description": "A clip request is an object describing how to clip targets.", 
      "properties": {
        "aoi": {
          "description": "The geojson representation of the clipped region that has been requested to be performed on the set of targets.", 
          "format": "geojson", 
          "type": "object"
        }, 
        "targets": {
          "description": "The target imagery from the Data API to apply the Clip operation on.", 
          "items": {
            "$ref": "#/definitions/Product"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "targets", 
        "aoi"
      ]
    }, 
    "DateRangeFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/FieldFilter"
        }, 
        {
          "properties": {
            "config": {
              "properties": {
                "gt": {
                  "format": "date-time", 
                  "type": "string"
                }, 
                "gte": {
                  "format": "date-time", 
                  "type": "string"
                }, 
                "lt": {
                  "format": "date-time", 
                  "type": "string"
                }, 
                "lte": {
                  "format": "date-time", 
                  "type": "string"
                }
              }, 
              "type": "object"
            }
          }, 
          "required": [
            "config"
          ], 
          "type": "object"
        }
      ]
    }, 
    "Error": {
      "properties": {
        "message": {
          "description": "A descriptive error message.", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "Errors": {
      "description": "A list of Errors.", 
      "items": {
        "$ref": "#/definitions/Error"
      }, 
      "type": "array"
    }, 
    "FieldFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/Filter"
        }, 
        {
          "properties": {
            "field_name": {
              "type": "string"
            }
          }, 
          "required": [
            "field_name"
          ], 
          "type": "object"
        }
      ]
    }, 
    "Filter": {
      "description": "Structured search criteria.", 
      "discriminator": "type", 
      "properties": {
        "type": {
          "description": "Logical filter type.", 
          "type": "string"
        }
      }, 
      "required": [
        "type"
      ], 
      "type": "object"
    }, 
    "FirstLink": {
      "properties": {
        "_first": {
          "description": "RFC 3986 URI representing the location of the first page of results.", 
          "type": "string"
        }
      }, 
      "required": [
        "_first"
      ], 
      "type": "object"
    }, 
    "GeoJSONFeature": {
      "description": "GeoJSON feature object.", 
      "properties": {
        "geometry": {
          "$ref": "#/definitions/GeoJSONGeometry"
        }, 
        "properties": {
          "type": "object"
        }
      }, 
      "required": [
        "properties", 
        "geometry"
      ], 
      "title": "Feature"
    }, 
    "GeoJSONFeatureCollection": {
      "description": "A GeoJSON feature collection.", 
      "properties": {
        "features": {
          "items": {
            "$ref": "#/definitions/GeoJSONFeature"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "features"
      ], 
      "title": "FeatureCollection"
    }, 
    "GeoJSONGeometry": {
      "description": "A GeoJSON geometry.", 
      "discriminator": "type", 
      "properties": {
        "type": {
          "description": "GeoJSON geometery type. All types are supported.", 
          "enum": [
            "Point", 
            "MultiPoint", 
            "LineString", 
            "MultiLineString", 
            "Polygon", 
            "MultiPolygon"
          ], 
          "type": "string"
        }
      }, 
      "required": [
        "type"
      ], 
      "type": "object"
    }, 
    "GeometryFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/Filter"
        }, 
        {
          "properties": {
            "config": {
              "$ref": "#/definitions/GeoJSONGeometry"
            }, 
            "field_name": {
              "enum": [
                "geometry"
              ], 
              "type": "string"
            }
          }, 
          "required": [
            "config", 
            "field_name"
          ], 
          "type": "object"
        }
      ]
    }, 
    "GridContext": {
      "description": "The grid context.", 
      "properties": {
        "quad_pattern": {
          "description": "Pattern to map quad coord to quad id.", 
          "type": "string"
        }, 
        "quad_size": {
          "description": "The size of the square quad in pixels.", 
          "type": "integer"
        }, 
        "resolution": {
          "description": "The resolution of the maximum zoom level in meters.", 
          "type": "number"
        }
      }, 
      "type": "object"
    }, 
    "Item": {
      "properties": {
        "_links": {
          "allOf": [
            {
              "$ref": "#/definitions/SelfLink"
            }, 
            {
              "$ref": "#/definitions/AssetsLink"
            }, 
            {
              "$ref": "#/definitions/ThumbLink"
            }
          ], 
          "description": "Links to related endpoints.", 
          "type": "object"
        }, 
        "_permissions": {
          "description": "An array of permissons the authenticated user has to the item."
        }, 
        "geometry": {
          "$ref": "#/definitions/GeoJSONGeometry"
        }, 
        "id": {
          "description": "Item identifier.", 
          "type": "string"
        }, 
        "properties": {
          "description": "Item metadata. [Varies by item_type.](https://developers.planet.com/docs/api/items-assets/#item-types)",
          "properties": {
            "acquired": {
              "description": "Timestamp that the item was captured.", 
              "format": "date-time", 
              "type": "string"
            }, 
            "anomalous_pixels": {
              "description": "The percentage of pixels that may have errors.", 
              "format": "float", 
              "type": "number"
            }, 
            "black_fill": {
              "description": "The percentage of the item containing black fill.", 
              "format": "float", 
              "type": "number"
            }, 
            "cloud_cover": {
              "description": "Average percentage of cloud coverage throughout the item.", 
              "format": "float", 
              "type": "number"
            }, 
            "columns": {
              "description": "The number of columns in the item.", 
              "type": "integer"
            }, 
            "epsg_code": {
              "description": "The unique code that identifies the spatial reference system for the item.", 
              "type": "integer"
            }, 
            "gsd": {
              "description": "Ground sample distance - the distance between pixel centers as measured on the ground.", 
              "format": "float", 
              "type": "number"
            }, 
            "item_type": {
              "description": "The planet item type.", 
              "type": "string"
            }, 
            "origin_x": {
              "description": "ULX coordinate of the extent of the data. The coordinate references the top left corner of the top left pixel.", 
              "type": "integer"
            }, 
            "origin_y": {
              "description": "ULY coordinate of the extent of the data. The coordinate references the top left corner of the top left pixel.", 
              "type": "integer"
            }, 
            "pixel_resolution": {
              "description": "Pixel resolution of the item in meters.", 
              "type": "integer"
            }, 
            "provider": {
              "description": "Name of the item provider.", 
              "type": "string"
            }, 
            "published": {
              "description": "Timestamp that the item was published to the Planet API.", 
              "format": "date-time", 
              "type": "string"
            }, 
            "rows": {
              "description": "The number of rows in the item", 
              "type": "integer"
            }, 
            "satellite_id": {
              "description": "Globally unique identifier of the satellite that acquired the item.", 
              "type": "string"
            }, 
            "sun_azimuth": {
              "description": "The angle of the sun, as seen by the observer, measured clockwise from the north.", 
              "format": "float", 
              "type": "number"
            }, 
            "sun_elevation": {
              "description": "The angle of the sun above the horizon.", 
              "format": "float", 
              "type": "number"
            }, 
            "updated": {
              "description": "Timestamp that the item record was last updated.", 
              "format": "date-time", 
              "type": "string"
            }, 
            "usable_data": {
              "description": "The percentage of pixels that are usable.", 
              "format": "float", 
              "type": "number"
            }, 
            "view_angle": {
              "description": "The satellite's across-track, off-nadir viewing angle. Positive numbers denote east, negitive numbers denote west.", 
              "format": "float", 
              "type": "number"
            }
          }, 
          "type": "object"
        }
      }, 
      "required": [
        "id", 
        "properties", 
        "_links"
      ], 
      "type": "object"
    }, 
    "ItemPage": {
      "properties": {
        "_links": {
          "allOf": [
            {
              "$ref": "#/definitions/SelfLink"
            }, 
            {
              "$ref": "#/definitions/FirstLink"
            }, 
            {
              "$ref": "#/definitions/NextLink"
            }
          ], 
          "description": "Links to related endpoints.", 
          "type": "object"
        }, 
        "features": {
          "description": "Array of items matching the search.", 
          "items": {
            "$ref": "#/definitions/Item"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "features", 
        "_links"
      ], 
      "type": "object"
    }, 
    "ItemType": {
      "properties": {
        "_links": {
          "allOf": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ], 
          "description": "Links to related endpoints.", 
          "type": "object"
        }, 
        "display_description": {
          "description": "Human-readable description of the item type.", 
          "type": "string"
        }, 
        "display_name": {
          "description": "Human-readable name of the the type.", 
          "type": "string"
        }, 
        "id": {
          "description": "Item type identifier.", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "ItemTypePage": {
      "properties": {
        "_links": {
          "allOf": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ], 
          "description": "Links to related endpoints.", 
          "type": "object"
        }, 
        "item_types": {
          "items": {
            "$ref": "#/definitions/ItemType"
          }, 
          "type": "array"
        }
      }, 
      "type": "object"
    }, 
    "LineString": {
      "properties": {
        "coordinates": {
          "allOf": [
            {
              "$ref": "#/definitions/PositionArray"
            }, 
            {
              "minItems": 2
            }
          ]
        }
      }, 
      "required": [
        "coordinates"
      ]
    }, 
    "LinearRing": {
      "allOf": [
        {
          "$ref": "#/definitions/PositionArray"
        }, 
        {
          "minItems": 4
        }
      ], 
      "description": "An array of four positions where the first equals the last"
    }, 
    "Mosaic": {
      "description": "A Mosaic is an object that includes the core metadata for a mosaic that is published on the platform. A Mosaic object may have additional fields depending on its `product_type`.", 
      "properties": {
        "_links": {
          "$ref": "#/definitions/MosaicLinks"
        }, 
        "bands": {
          "description": "The number of bands in this mosaic.", 
          "type": "integer"
        }, 
        "bbox": {
          "description": "The bounding box representing the extent of the mosaic.", 
          "items": {
            "format": "float64", 
            "type": "number"
          }, 
          "type": "array"
        }, 
        "coordinate_system": {
          "description": "The coordinate system of this mosaic.", 
          "type": "string"
        }, 
        "datatype": {
          "description": "The type of data (byte, uint16, float32, etc).", 
          "type": "string"
        }, 
        "first_acquired": {
          "description": "The acquisition date of the oldest scene that contributed to this mosaic.", 
          "format": "date-time", 
          "type": "string"
        }, 
        "grid": {
          "$ref": "#/definitions/GridContext"
        }, 
        "id": {
          "description": "Mosaic identifier.", 
          "format": "uuid", 
          "type": "string"
        }, 
        "interval": {
          "description": "The interval of the mosaic.", 
          "type": "string"
        }, 
        "item_types": {
          "description": "The item types in this mosaic.", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "last_acquired": {
          "description": "The acquisition date of the newest scene that contributed to this mosaic.", 
          "format": "date-time", 
          "type": "string"
        }, 
        "level": {
          "description": "The maximum zoom level in XYZ scheme.", 
          "type": "integer"
        }, 
        "name": {
          "description": "A unique name for this mosaic.", 
          "type": "string"
        }, 
        "product_type": {
          "description": "The product type of this mosaics, currently supported is \"timelapse\", \"basemap\".", 
          "type": "string"
        }, 
        "quad_download": {
          "description": "Your quad download permission for this mosaic.", 
          "type": "boolean"
        }
      }, 
      "required": [
        "bbox", 
        "coordinate_system", 
        "first_acquired", 
        "last_acquired", 
        "product_type", 
        "name"
      ], 
      "type": "object"
    }, 
    "MosaicLinks": {
      "properties": {
        "_self": {
          "description": "RFC 3986 URI representing the location of this object.", 
          "type": "string"
        }, 
        "quads": {
          "description": "RFC 3986 URI quad listing inside this mosaic.", 
          "type": "string"
        }, 
        "tiles": {
          "description": "XYZ tiles template link.", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "MosaicListLinks": {
      "properties": {
        "_next": {
          "description": "RFC 3986 URI representing the location of the next page of results. Omitted when there are no results, or the current page is the last.", 
          "type": "string"
        }, 
        "_self": {
          "description": "RFC 3986 URI representing the location of this object.", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "MosaicListPage": {
      "properties": {
        "_links": {
          "$ref": "#/definitions/MosaicListLinks"
        }, 
        "mosaics": {
          "items": {
            "$ref": "#/definitions/Mosaic"
          }, 
          "type": "array"
        }
      }, 
      "type": "object"
    }, 
    "MosaicSeries": {
      "description": "A Mosaic Series is a container to group mosaics that have a specific criteria. This can be likened to a filter on top of mosaics, where a series can be defined as a TOI/AOI on a set timelapse mosaics.", 
      "properties": {
        "_links": {
          "$ref": "#/definitions/MosaicSeriesLinks"
        }, 
        "first_acquired": {
          "description": "The acquisition date of the oldest scene that contributed to this series.", 
          "format": "date-time", 
          "type": "string"
        }, 
        "id": {
          "description": "Mosaic series identifier.", 
          "format": "uuid", 
          "type": "string"
        }, 
        "interval": {
          "description": "The interval for the mosaics in the series.", 
          "type": "string"
        }, 
        "last_acquired": {
          "description": "The acquisition date of the newest scene that contributed to this series.", 
          "format": "date-time", 
          "type": "string"
        }, 
        "name": {
          "description": "A human readable name for this series.", 
          "type": "string"
        }, 
        "product_type": {
          "description": "The type of product this mosaic is.", 
          "enum": [
            "basemap", 
            "timelapse", 
            "l3m"
          ], 
          "type": "string"
        }, 
        "selector": {
          "description": "A regular expression to match mosaic names.", 
          "type": "string"
        }
      }, 
      "required": [
        "interval", 
        "name", 
        "product_type", 
        "selector"
      ], 
      "type": "object"
    }, 
    "MosaicSeriesLinks": {
      "properties": {
        "_self": {
          "description": "RFC 3986 URI representing the location of this object.", 
          "type": "string"
        }, 
        "mosaics": {
          "description": "RFC 3986 URI to the mosaics inside this mosaic series.", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "MosaicSeriesListLinks": {
      "properties": {
        "_next": {
          "description": "RFC 3986 URI representing the location of the next page of results. Omitted when there are no results, or the current page is the last.", 
          "type": "string"
        }, 
        "_self": {
          "description": "RFC 3986 URI representing the location of this object.", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "MosaicSeriesListPage": {
      "properties": {
        "_links": {
          "$ref": "#/definitions/MosaicSeriesListLinks"
        }, 
        "series": {
          "items": {
            "$ref": "#/definitions/MosaicSeries"
          }, 
          "type": "array"
        }
      }, 
      "type": "object"
    }, 
    "MosaicSeriesMosaicsLinks": {
      "properties": {
        "_self": {
          "description": "RFC 3986 URI representing the location of this object.", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "MosaicSeriesMosaicsListPage": {
      "properties": {
        "_links": {
          "$ref": "#/definitions/MosaicSeriesMosaicsLinks"
        }, 
        "mosaics": {
          "items": {
            "$ref": "#/definitions/Mosaic"
          }, 
          "type": "array"
        }
      }, 
      "type": "object"
    }, 
    "MultiLineString": {
      "properties": {
        "coordinates": {
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/PositionArray"
              }, 
              {
                "minItems": 2
              }
            ]
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "coordinates"
      ]
    }, 
    "MultiPoint": {
      "properties": {
        "coordinates": {
          "$ref": "#/definitions/PositionArray"
        }
      }, 
      "required": [
        "coordinates"
      ]
    }, 
    "MultiPolygon": {
      "properties": {
        "coordinates": {
          "items": {
            "items": {
              "$ref": "#/definitions/LinearRing"
            }, 
            "type": "array"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "coordinates"
      ]
    }, 
    "NextLink": {
      "properties": {
        "_next": {
          "description": "RFC 3986 URI representing the location of the next page of results. Omitted when there are no results, or the current page is the last.", 
          "type": "string"
        }
      }, 
      "required": [
        "_next"
      ], 
      "type": "object"
    }, 
    "NotFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/Filter"
        }, 
        {
          "properties": {
            "config": {
              "$ref": "#/definitions/Filter"
            }
          }, 
          "required": [
            "config"
          ], 
          "type": "object"
        }
      ]
    }, 
    "NumberInFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/FieldFilter"
        }, 
        {
          "properties": {
            "config": {
              "items": {
                "format": "int64", 
                "type": "number"
              }, 
              "type": "array"
            }
          }, 
          "required": [
            "config"
          ], 
          "type": "object"
        }
      ]
    }, 
    "OrFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/Filter"
        }, 
        {
          "properties": {
            "config": {
              "items": {
                "$ref": "#/definitions/Filter"
              }, 
              "type": "array"
            }
          }, 
          "required": [
            "config"
          ], 
          "type": "object"
        }
      ]
    }, 
    "PermissionFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/Filter"
        }, 
        {
          "properties": {
            "config": {
              "items": {
                "enum": [
                  "assets:download", 
                  "assets.analytic:download", 
                  "assets.analytic_dn:download", 
                  "assets.analytic_dn_xml:download", 
                  "assets.analytic_xml:download", 
                  "assets.basic_analytic:download", 
                  "assets.basic_analytic_dn:download", 
                  "assets.basic_analytic_dn_nitf:download", 
                  "assets.basic_analytic_dn_rpc:download", 
                  "assets.basic_analytic_dn_rpc_nitf:download", 
                  "assets.basic_analytic_dn_xml:download", 
                  "assets.basic_analytic_dn_xml_nitf:download", 
                  "assets.basic_analytic_nitf:download", 
                  "assets.basic_analytic_rpc:download", 
                  "assets.basic_analytic_rpc_nitf:download", 
                  "assets.basic_analytic_xml:download", 
                  "assets.basic_analytic_xml_nitf:download", 
                  "assets.basic_rpc:download", 
                  "assets.basic_udm:download", 
                  "assets.udm:download", 
                  "assets.unrectified:download", 
                  "assets.visual:download", 
                  "assets.visual_xml:download", 
                  "assets.basic_analytic_b1:download", 
                  "assets.basic_analytic_b2:download", 
                  "assets.basic_analytic_b3:download", 
                  "assets.basic_analytic_b4:download", 
                  "assets.basic_analytic_b5:download", 
                  "assets.basic_analytic_b1_nitf:download", 
                  "assets.basic_analytic_b2_nitf:download", 
                  "assets.basic_analytic_b3_nitf:download", 
                  "assets.basic_analytic_b4_nitf:download", 
                  "assets.basic_analytic_b5_nitf:download", 
                  "assets.basic_analytic_sci:download", 
                  "assets.browse:download", 
                  "assets.analytic_b1:download", 
                  "assets.analytic_b2:download", 
                  "assets.analytic_b3:download", 
                  "assets.analytic_b4:download", 
                  "assets.analytic_b5:download", 
                  "assets.analytic_b6:download", 
                  "assets.analytic_b7:download", 
                  "assets.analytic_b8:download", 
                  "assets.analytic_b8a:download", 
                  "assets.analytic_b9:download", 
                  "assets.analytic_b10:download", 
                  "assets.analytic_b11:download", 
                  "assets.analytic_b12:download", 
                  "assets.analytic_bqa:download", 
                  "assets.analytic_ms:download", 
                  "assets.metadata_txt:download", 
                  "assets.metadata_aux:download", 
                  "assets.basic_panchromatic_dn:download", 
                  "assets.basic_panchromatic_dn_rpc:download", 
                  "assets.ortho_analytic_dn:download", 
                  "assets.ortho_analytic_udm:download", 
                  "assets.ortho_panchromatic_dn:download", 
                  "assets.ortho_panchromatic_udm:download", 
                  "assets.ortho_pansharpened:download", 
                  "assets.ortho_pansharpened_udm:download", 
                  "assets.ortho_visual:download", 
                  "assets.analytic_sr:download", 
                  "assets.ortho_analytic_vv:download", 
                  "assets.ortho_analytic_vh:download", 
                  "assets.ortho_analytic_hh:download", 
                  "assets.ortho_analytic_hv:download"
                ], 
                "type": "string"
              }, 
              "type": "array"
            }
          }, 
          "required": [
            "config"
          ], 
          "type": "object"
        }
      ]
    }, 
    "Point": {
      "properties": {
        "coordinates": {
          "$ref": "#/definitions/Position"
        }
      }, 
      "required": [
        "coordinates"
      ]
    }, 
    "Polygon": {
      "properties": {
        "coordinates": {
          "items": {
            "$ref": "#/definitions/LinearRing"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "coordinates"
      ]
    }, 
    "Position": {
      "description": "A single position", 
      "items": {
        "type": "number"
      }, 
      "maxItems": 2, 
      "minItems": 2, 
      "type": "array"
    }, 
    "PositionArray": {
      "description": "An array of two or more positions", 
      "items": {
        "$ref": "#/definitions/Position"
      }, 
      "type": "array"
    }, 
    "PrevLink": {
      "properties": {
        "_prev": {
          "description": "RFC 3986 URI representing the location of the previous page of results. Omitted from first page of results.", 
          "type": "string"
        }
      }, 
      "required": [
        "_prev"
      ], 
      "type": "object"
    }, 
    "Product": {
      "description": "A product/target is item_type/asset_type/item_id to apply an operation on.", 
      "properties": {
        "asset_type": {
          "description": "asset-type for the item.", 
          "type": "string"
        }, 
        "item_id": {
          "description": "item id to", 
          "type": "string"
        }, 
        "item_type": {
          "description": "item-type for requested item_id.", 
          "type": "string"
        }
      }, 
      "required": [
        "item_type", 
        "asset_type", 
        "item_id"
      ], 
      "type": "object"
    }, 
    "Quad": {
      "properties": {
        "_links": {
          "properties": {
            "_self": {
              "description": "RFC 3986 URI representing the canonical location of this object.", 
              "type": "string"
            }, 
            "download": {
              "description": "RFC 3986 URI representing the canonical quad download location.", 
              "type": "string"
            }, 
            "items": {
              "description": "RFC 3986 URI representing the canonical location of the items make up the quad.", 
              "type": "string"
            }, 
            "thumbnail": {
              "description": "RFC 3986 URI representing the canonical location of the item thumbnail image.", 
              "type": "string"
            }
          }, 
          "type": "object"
        }, 
        "bbox": {
          "description": "The bounding box representing the extent of the quad.", 
          "items": {
            "format": "float64", 
            "type": "number"
          }, 
          "type": "array"
        }, 
        "id": {
          "description": "Quad identifier.", 
          "type": "string"
        }, 
        "percent_covered": {
          "description": "The percentage of the GeoTIFF pixels that are not no-data values.", 
          "format": "float", 
          "type": "number"
        }
      }, 
      "required": [
        "id", 
        "bbox", 
        "percent_covered", 
        "_links"
      ], 
      "type": "object"
    }, 
    "QuadItem": {
      "properties": {
        "item_id": {
          "description": "Planet item id.", 
          "type": "string"
        }, 
        "item_type": {
          "description": "Planet item type.", 
          "type": "string"
        }, 
        "link": {
          "description": "RFC 3986 URI representing the location of this item details.", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "QuadItems": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/QuadItem"
          }, 
          "type": "array"
        }
      }, 
      "type": "object"
    }, 
    "QuadListLinks": {
      "properties": {
        "_next": {
          "description": "RFC 3986 URI representing the location of the next page of results. Omitted when there are no results, or the current page is the last.", 
          "type": "string"
        }, 
        "_self": {
          "description": "RFC 3986 URI representing the canonical location of this object.", 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "QuadListPage": {
      "properties": {
        "_links": {
          "$ref": "#/definitions/QuadListLinks"
        }, 
        "items": {
          "items": {
            "$ref": "#/definitions/Quad"
          }, 
          "type": "array"
        }
      }, 
      "type": "object"
    }, 
    "QuickSearch": {
      "properties": {
        "filter": {
          "$ref": "#/definitions/Filter"
        }, 
        "item_types": {
          "description": "The item types to include in the search.", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The name of the saved search.", 
          "pattern": "^.{1,64}$", 
          "type": "string"
        }
      }, 
      "required": [
        "filter", 
        "item_types"
      ], 
      "type": "object"
    }, 
    "RangeFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/FieldFilter"
        }, 
        {
          "properties": {
            "config": {
              "properties": {
                "gt": {
                  "format": "double", 
                  "type": "number"
                }, 
                "gte": {
                  "format": "double", 
                  "type": "number"
                }, 
                "lt": {
                  "format": "double", 
                  "type": "number"
                }, 
                "lte": {
                  "format": "double", 
                  "type": "number"
                }
              }, 
              "type": "object"
            }
          }, 
          "required": [
            "config"
          ], 
          "type": "object"
        }
      ]
    }, 
    "ResultsLink": {
      "properties": {
        "thumbnail": {
          "description": "RFC 3986 URI representing the canonical location to get saved search results.", 
          "type": "string"
        }
      }, 
      "required": [
        "thumbnail"
      ]
    }, 
    "SavedSearch": {
      "properties": {
        "filter": {
          "$ref": "#/definitions/Filter"
        }, 
        "item_types": {
          "description": "The ItemTypes to include in the search.", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "name": {
          "description": "The name of this saved search.", 
          "pattern": "^.{1,64}$", 
          "type": "string"
        }
      }, 
      "required": [
        "name", 
        "filter", 
        "item_types"
      ], 
      "type": "object"
    }, 
    "Search": {
      "properties": {
        "__daily_email_enabled": {
          "default": false, 
          "description": "Send a daily email when new results are added.", 
          "type": "boolean"
        }, 
        "_links": {
          "allOf": [
            {
              "$ref": "#/definitions/SelfLink"
            }, 
            {
              "$ref": "#/definitions/ResultsLink"
            }
          ], 
          "description": "Links to related endpoints.", 
          "type": "object"
        }, 
        "created": {
          "description": "The date the record was created.", 
          "format": "date-time", 
          "type": "string"
        }, 
        "filter": {
          "$ref": "#/definitions/Filter"
        }, 
        "id": {
          "description": "Saved search identifier.", 
          "pattern": "^.{32}$", 
          "type": "string"
        }, 
        "last_executed": {
          "description": "The date the search was last executed.", 
          "format": "date-time", 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the saved search.", 
          "pattern": "^.{1,64}$", 
          "type": "string"
        }, 
        "updated": {
          "description": "The date the record was updated.", 
          "format": "date-time", 
          "type": "string"
        }
      }, 
      "required": [
        "filter", 
        "name", 
        "created", 
        "updated", 
        "last_executed", 
        "id"
      ], 
      "type": "object"
    }, 
    "SearchPage": {
      "properties": {
        "_links": {
          "allOf": [
            {
              "$ref": "#/definitions/SelfLink"
            }, 
            {
              "$ref": "#/definitions/FirstLink"
            }, 
            {
              "$ref": "#/definitions/NextLink"
            }, 
            {
              "$ref": "#/definitions/PrevLink"
            }
          ], 
          "description": "Links to related endpoints.", 
          "type": "object"
        }, 
        "searches": {
          "description": "A list of saved searches.", 
          "items": {
            "$ref": "#/definitions/Search"
          }, 
          "type": "array"
        }
      }, 
      "required": [
        "_links", 
        "searches"
      ], 
      "type": "object"
    }, 
    "SelfLink": {
      "properties": {
        "_self": {
          "description": "RFC 3986 URI representing the canonical location of this object.", 
          "type": "string"
        }
      }, 
      "required": [
        "_self"
      ], 
      "type": "object"
    }, 
    "Stats": {
      "properties": {
        "filter": {
          "$ref": "#/definitions/Filter"
        }, 
        "interval": {
          "description": "The size of the histogram date buckets.", 
          "enum": [
            "hour", 
            "day", 
            "week", 
            "month", 
            "year"
          ], 
          "type": "string"
        }, 
        "item_types": {
          "description": "The item types to include in the stats.", 
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }, 
        "utc_offset": {
          "description": "A \"ISO 8601 UTC offset\" (e.g. +01:00 or -08:00) that can be used to adjust the buckets to a users time zone. It is optional.", 
          "type": "string"
        }
      }, 
      "required": [
        "filter", 
        "interval"
      ], 
      "type": "object"
    }, 
    "StatsBucketResults": {
      "properties": {
        "count": {
          "description": "Count of items in the bucket.", 
          "type": "number"
        }, 
        "start_time": {
          "description": "Start time of the aggregated bucket.", 
          "format": "date-time", 
          "type": "string"
        }
      }, 
      "required": [
        "count", 
        "start_time"
      ], 
      "type": "object"
    }, 
    "StatsResults": {
      "properties": {
        "buckets": {
          "description": "List of buckets for agregration.", 
          "items": {
            "$ref": "#/definitions/StatsBucketResults"
          }, 
          "type": "array"
        }, 
        "interval": {
          "description": "The size of the histogram date buckets.", 
          "enum": [
            "hour", 
            "day", 
            "week", 
            "month", 
            "year"
          ], 
          "type": "string"
        }, 
        "utc_offset": {
          "description": "A \"ISO 8601 UTC offset\" (e.g. +01:00 or -08:00) that can be used to adjust the buckets to a users time zone. It is optional.", 
          "type": "string"
        }
      }, 
      "required": [
        "utc_offset", 
        "interval", 
        "buckets"
      ], 
      "type": "object"
    }, 
    "StringInFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/FieldFilter"
        }, 
        {
          "properties": {
            "config": {
              "items": {
                "type": "string"
              }, 
              "type": "array"
            }
          }, 
          "required": [
            "config"
          ], 
          "type": "object"
        }
      ]
    }, 
    "ThumbLink": {
      "properties": {
        "thumbnail": {
          "description": "RFC 3986 URI representing the canonical location of the item thumbnail image.", 
          "type": "string"
        }
      }, 
      "required": [
        "thumbnail"
      ]
    }
  }, 
  "host": "api.planet.com", 
  "info": {
    "description": "The Planet API is a RESTful API interface to Planet’s imagery archive. It enables programmatic support for searching, clipping, ordering, and viewing satellite imagery on a map.",
    "termsOfService": "http://www.planet.com/terms/", 
    "title": "Planet API", 
    "version": "1.0.0"
  }, 
  "parameters": {
    "pAssetTypeID": {
      "description": "Asset type identifier.", 
      "in": "path", 
      "name": "asset_type_id", 
      "required": true, 
      "type": "string"
    }, 
    "pClipId": {
      "description": "The Clip ID (a UUID).", 
      "format": "uuid", 
      "in": "path", 
      "name": "clip_id", 
      "required": true, 
      "type": "string"
    }, 
    "pItemID": {
      "description": "Item identifier.", 
      "in": "path", 
      "name": "item_id", 
      "required": true, 
      "type": "string"
    }, 
    "pItemTypeID": {
      "description": "Item type identifier.", 
      "in": "path", 
      "name": "item_type_id", 
      "required": true, 
      "type": "string"
    }, 
    "pMosaicId": {
      "description": "Mosaic identifier.", 
      "in": "path", 
      "name": "mosaic_id", 
      "required": true, 
      "type": "string"
    }, 
    "pOrderId": {
      "description": "The Order ID (a UUID).", 
      "format": "uuid", 
      "in": "path", 
      "name": "order_id", 
      "required": true, 
      "type": "string"
    }, 
    "pPageMarker": {
      "description": "Paging marker", 
      "in": "query", 
      "name": "page_marker", 
      "type": "string"
    }, 
    "pQuadId": {
      "description": "Quad identifier.", 
      "in": "path", 
      "name": "quad_id", 
      "required": true, 
      "type": "string"
    }, 
    "pSearchID": {
      "description": "Saved search identifier.", 
      "in": "path", 
      "name": "search_id", 
      "required": true, 
      "type": "string"
    }, 
    "pSeriesId": {
      "description": "Series identifier.", 
      "in": "path", 
      "name": "series_id", 
      "required": true, 
      "type": "string"
    }, 
    "qPage": {
      "description": "Token representing a specific page of results. This should never be constructed manually.", 
      "in": "query", 
      "name": "_page", 
      "type": "string"
    }, 
    "qPageSize": {
      "default": 250, 
      "description": "Number of results to return per page. This may only be used at the start of pagination. This may not be provided with the \"_page\" parameter.", 
      "format": "int64", 
      "in": "query", 
      "maximum": 250, 
      "minimum": 0, 
      "name": "_page_size", 
      "type": "integer"
    }, 
    "qSearchResultSort": {
      "default": "published desc", 
      "description": "Field and direction to order results by. This may not be provided with the \"_page\" parameter.", 
      "enum": [
        "acquired asc", 
        "acquired desc", 
        "published asc", 
        "published desc"
      ], 
      "in": "query", 
      "name": "_sort", 
      "type": "string"
    }, 
    "qSearchSort": {
      "default": "created desc", 
      "description": "Field and direction to order results by. This may not be provided with the \"_page\" parameter.", 
      "enum": [
        "created desc", 
        "created asc"
      ], 
      "in": "query", 
      "name": "_sort", 
      "type": "string"
    }, 
    "qSearchType": {
      "default": "any", 
      "description": "Search type filter.", 
      "enum": [
        "any", 
        "saved", 
        "quick"
      ], 
      "in": "query", 
      "name": "search_type", 
      "type": "string"
    }, 
    "qStrict": {
      "default": false, 
      "description": "Strictly remove false positives from geo intersection.", 
      "in": "query", 
      "name": "strict", 
      "type": "boolean"
    }
  }, 
  "paths": {
    "/basemaps/v1/mosaics": {
      "get": {
        "description": "List all accessible mosaics. For non authenticated users, this returns public mosaics.", 
        "operationId": "listMosaics", 
        "parameters": [
          {
            "description": "Integer representing a specific page of results.", 
            "in": "query", 
            "name": "_page", 
            "type": "integer"
          }, 
          {
            "description": "Number of results to return per page.", 
            "in": "query", 
            "name": "_page_size", 
            "type": "integer"
          }
        ], 
        "responses": {
          "200": {
            "description": "List of mosaics.", 
            "schema": {
              "$ref": "#/definitions/MosaicListPage"
            }
          }, 
          "default": {
            "$ref": "#/responses/General"
          }
        }, 
        "summary": "List Mosaics", 
        "tags": [
          "Basemaps and Mosaics"
        ]
      }
    }, 
    "/basemaps/v1/mosaics/{mosaic_id}": {
      "get": {
        "description": "Get a mosaic by id.", 
        "operationId": "getMosaic", 
        "parameters": [
          {
            "$ref": "#/parameters/pMosaicId"
          }
        ], 
        "responses": {
          "200": {
            "description": "Mosaic details.", 
            "schema": {
              "$ref": "#/definitions/Mosaic"
            }
          }, 
          "401": {
            "$ref": "#/responses/Forbidden"
          }, 
          "404": {
            "$ref": "#/responses/NotFound"
          }, 
          "default": {
            "$ref": "#/responses/General"
          }
        }, 
        "summary": "Get Mosaic", 
        "tags": [
          "Basemaps and Mosaics"
        ]
      }
    }, 
    "/basemaps/v1/mosaics/{mosaic_id}/grid": {
      "get": {
        "description": "Get extended mosaic metadata by id.", 
        "operationId": "getMosaicGrid", 
        "parameters": [
          {
            "$ref": "#/parameters/pMosaicId"
          }
        ], 
        "responses": {
          "200": {
            "description": "Extended mosaic details.", 
            "schema": {
              "$ref": "#/definitions/GridContext"
            }
          }, 
          "401": {
            "$ref": "#/responses/Forbidden"
          }, 
          "404": {
            "$ref": "#/responses/NotFound"
          }, 
          "default": {
            "$ref": "#/responses/General"
          }
        }, 
        "summary": "Get Mosaic Grid", 
        "tags": [
          "Basemaps and Mosaics"
        ]
      }
    }, 
    "/basemaps/v1/mosaics/{mosaic_id}/quads": {
      "get": {
        "description": "List of quad download links for a mosaic.", 
        "operationId": "getQuadDownloadLinks", 
        "parameters": [
          {
            "$ref": "#/parameters/pMosaicId"
          }, 
          {
            "description": "Comma separated bounding box in degrees as lx,ly,ux,uy.", 
            "in": "query", 
            "name": "bbox", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "If true, only return quad download links.", 
            "in": "query", 
            "name": "minimal", 
            "type": "boolean"
          }, 
          {
            "description": "Integer representing a specific page of results.", 
            "in": "query", 
            "name": "_page", 
            "type": "string"
          }, 
          {
            "description": "Number of results to return per page.", 
            "in": "query", 
            "name": "_page_size", 
            "type": "integer"
          }
        ], 
        "responses": {
          "200": {
            "description": "List of quad download links.", 
            "schema": {
              "$ref": "#/definitions/QuadListPage"
            }
          }, 
          "401": {
            "$ref": "#/responses/Forbidden"
          }, 
          "404": {
            "$ref": "#/responses/NotFound"
          }, 
          "default": {
            "$ref": "#/responses/General"
          }
        }, 
        "summary": "List Mosaic Quads", 
        "tags": [
          "Basemaps and Mosaics"
        ]
      }
    }, 
    "/basemaps/v1/mosaics/{mosaic_id}/quads/{quad_id}": {
      "get": {
        "description": "Get mosaic quad by id.", 
        "operationId": "getQuad", 
        "parameters": [
          {
            "$ref": "#/parameters/pMosaicId"
          }, 
          {
            "$ref": "#/parameters/pQuadId"
          }
        ], 
        "responses": {
          "200": {
            "description": "Mosaic quad details.", 
            "schema": {
              "$ref": "#/definitions/Quad"
            }
          }, 
          "401": {
            "$ref": "#/responses/Forbidden"
          }, 
          "404": {
            "$ref": "#/responses/NotFound"
          }, 
          "default": {
            "$ref": "#/responses/General"
          }
        }, 
        "summary": "Get Mosaic Quad", 
        "tags": [
          "Basemaps and Mosaics"
        ]
      }
    }, 
    "/basemaps/v1/mosaics/{mosaic_id}/quads/{quad_id}/full": {
      "get": {
        "description": "Get a full quad download URL quad id.", 
        "operationId": "getQuadDownload", 
        "parameters": [
          {
            "$ref": "#/parameters/pMosaicId"
          }, 
          {
            "$ref": "#/parameters/pQuadId"
          }
        ], 
        "responses": {
          "302": {
            "description": "302 redirect to quad download.", 
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          }, 
          "401": {
            "$ref": "#/responses/Forbidden"
          }, 
          "404": {
            "$ref": "#/responses/NotFound"
          }, 
          "default": {
            "$ref": "#/responses/General"
          }
        }, 
        "summary": "Get Mosaic Quad URL", 
        "tags": [
          "Basemaps and Mosaics"
        ]
      }
    }, 
    "/basemaps/v1/mosaics/{mosaic_id}/quads/{quad_id}/items": {
      "get": {
        "description": "List items that contributed to a quad.", 
        "operationId": "getQuadItems", 
        "parameters": [
          {
            "$ref": "#/parameters/pMosaicId"
          }, 
          {
            "$ref": "#/parameters/pQuadId"
          }
        ], 
        "responses": {
          "200": {
            "description": "List of items.", 
            "schema": {
              "$ref": "#/definitions/QuadItems"
            }
          }, 
          "401": {
            "$ref": "#/responses/Forbidden"
          }, 
          "404": {
            "$ref": "#/responses/NotFound"
          }, 
          "default": {
            "$ref": "#/responses/General"
          }
        }, 
        "summary": "List Mosaic Quad Items", 
        "tags": [
          "Basemaps and Mosaics"
        ]
      }
    }, 
    "/basemaps/v1/mosaics/{mosaic_id}/tiles": {
      "get": {
        "description": "Get TileJSON for Mosaic. See https://github.com/mapbox/tilejson-spec", 
        "operationId": "getMosaicTileJSON", 
        "parameters": [
          {
            "$ref": "#/parameters/pMosaicId"
          }
        ], 
        "responses": {
          "200": {
            "description": "Gets a single Mosaic extended record.", 
            "schema": {
              "type": "object"
            }
          }, 
          "401": {
            "$ref": "#/responses/Forbidden"
          }, 
          "404": {
            "$ref": "#/responses/NotFound"
          }, 
          "default": {
            "$ref": "#/responses/General"
          }
        }, 
        "summary": "Get Mosaic TileJSON", 
        "tags": [
          "Basemaps and Mosaics"
        ]
      }
    }, 
    "/basemaps/v1/series": {
      "get": {
        "description": "List all mosaic series available to the authenticated user.", 
        "operationId": "listSeries", 
        "parameters": [
          {
            "description": "Integer representing a specific page of results.", 
            "in": "query", 
            "name": "_page", 
            "type": "integer"
          }, 
          {
            "description": "Number of results to return per page.", 
            "in": "query", 
            "name": "_page_size", 
            "type": "integer"
          }
        ], 
        "responses": {
          "200": {
            "description": "A list of mosaic series.", 
            "schema": {
              "$ref": "#/definitions/MosaicSeriesListPage"
            }
          }, 
          "401": {
            "$ref": "#/responses/Forbidden"
          }, 
          "404": {
            "$ref": "#/responses/NotFound"
          }, 
          "default": {
            "$ref": "#/responses/General"
          }
        }, 
        "summary": "List Mosaic Series", 
        "tags": [
          "Basemaps and Mosaics"
        ]
      }
    }, 
    "/basemaps/v1/series/{series_id}": {
      "get": {
        "description": "Get a mosaic series by id.", 
        "operationId": "getSeries", 
        "parameters": [
          {
            "$ref": "#/parameters/pSeriesId"
          }
        ], 
        "responses": {
          "200": {
            "description": "Mosaic Series details.", 
            "schema": {
              "$ref": "#/definitions/MosaicSeries"
            }
          }, 
          "401": {
            "$ref": "#/responses/Forbidden"
          }, 
          "404": {
            "$ref": "#/responses/NotFound"
          }, 
          "default": {
            "$ref": "#/responses/General"
          }
        }, 
        "summary": "Get Mosaic Series", 
        "tags": [
          "Basemaps and Mosaics"
        ]
      }
    }, 
    "/basemaps/v1/series/{series_id}/mosaics": {
      "get": {
        "description": "List mosaics in this series.", 
        "operationId": "getSeriesMosaics", 
        "parameters": [
          {
            "$ref": "#/parameters/pSeriesId"
          }
        ], 
        "responses": {
          "200": {
            "description": "List of mosaics in this series.", 
            "schema": {
              "$ref": "#/definitions/MosaicSeriesMosaicsListPage"
            }
          }, 
          "401": {
            "$ref": "#/responses/Forbidden"
          }, 
          "404": {
            "$ref": "#/responses/NotFound"
          }, 
          "default": {
            "$ref": "#/responses/General"
          }
        }, 
        "summary": "List Series' Mosaics", 
        "tags": [
          "Basemaps and Mosaics"
        ]
      }
    }, 
    "/compute/ops/clips/v1": {
      "get": {
        "description": "Returns all pending clip requests.", 
        "operationId": "listClips", 
        "parameters": [
          {
            "$ref": "#/parameters/pPageMarker"
          }
        ], 
        "responses": {
          "200": {
            "description": "A list of Clip requests.", 
            "schema": {
              "$ref": "#/definitions/ClipListPage"
            }
          }, 
          "401": {
            "$ref": "#/responses/Forbidden"
          }, 
          "500": {
            "$ref": "#/responses/Error"
          }, 
          "default": {
            "$ref": "#/responses/General"
          }
        }, 
        "summary": "List Clips", 
        "tags": [
          "Clip And Ship"
        ]
      }, 
      "post": {
        "description": "Clips a scene.", 
        "operationId": "clipScene", 
        "parameters": [
          {
            "description": "Clip details.", 
            "in": "body", 
            "name": "body", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/ClipRequest"
            }
          }
        ], 
        "responses": {
          "202": {
            "description": "The Clip Request was accepted, and is processing.", 
            "schema": {
              "$ref": "#/definitions/Clip"
            }
          }, 
          "400": {
            "$ref": "#/responses/BadRequest"
          }, 
          "401": {
            "$ref": "#/responses/Forbidden"
          }, 
          "500": {
            "$ref": "#/responses/Error"
          }, 
          "default": {
            "$ref": "#/responses/General"
          }
        }, 
        "summary": "List Clips", 
        "tags": [
          "Clip And Ship"
        ]
      }
    }, 
    "/compute/ops/clips/v1/{clip_id}": {
      "get": {
        "description": "Get clip request details by Id.", 
        "operationId": "getClip", 
        "parameters": [
          {
            "$ref": "#/parameters/pClipId"
          }
        ], 
        "responses": {
          "200": {
            "description": "Gets a single Clip record.", 
            "schema": {
              "$ref": "#/definitions/Clip"
            }
          }, 
          "401": {
            "$ref": "#/responses/Forbidden"
          }, 
          "404": {
            "$ref": "#/responses/NotFound"
          }, 
          "500": {
            "$ref": "#/responses/Error"
          }, 
          "default": {
            "$ref": "#/responses/General"
          }
        }, 
        "summary": "Get Clip", 
        "tags": [
          "Clip And Ship"
        ]
      }
    }, 
    "/data/v1/asset-types": {
      "get": {
        "description": "List all asset types available to the authenticated user.\n\nAn `asset` describes a product that can be derived from an item's source data, and can be used for various analytic, visual or other purposes. These are referred to as `assets_types`.\n\n\n [Learn more about asset types](https://developers.planet.com/docs/api/items-assets/#assets)\n",
        "operationId": "ListAssetTypes", 
        "responses": {
          "200": {
            "description": "List of asset types.", 
            "schema": {
              "$ref": "#/definitions/AssetTypePage"
            }
          }
        }, 
        "summary": "List Asset Types", 
        "tags": [
          "Items and Assets"
        ]
      }
    }, 
    "/data/v1/asset-types/{asset_type_id}": {
      "get": {
        "description": "Get an asset type by id.\nAn `asset` describes a product that can be derived from an item's source data, and can be used for various analytic, visual or other purposes. These are referred to as `assets_types`.\n\n[Learn more about asset types](https://developers.planet.com/docs/api/items-assets/#assets)\n",
        "operationId": "GetAssetType", 
        "parameters": [
          {
            "$ref": "#/parameters/pAssetTypeID"
          }
        ], 
        "responses": {
          "200": {
            "description": "Asset type details.", 
            "schema": {
              "$ref": "#/definitions/AssetType"
            }
          }, 
          "404": {
            "description": "The requested asset type does not exist.", 
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }, 
        "summary": "Get Asset Type", 
        "tags": [
          "Items and Assets"
        ]
      }
    }, 
    "/data/v1/item-types": {
      "get": {
        "description": "List all item types available to the authenticated user.\n\nAn `item_type` represents the class of spacecraft and/or processing level of an item. All items have an associated `item_type`. Each `item_type` has a specific list of `assets_types` that can be derived from the item's source data.\n\n[Learn more about item types](https://developers.planet.com/docs/api/items-assets/#item-types)\n",
        "operationId": "ListItemTypes", 
        "responses": {
          "200": {
            "description": "List of item types.", 
            "schema": {
              "$ref": "#/definitions/ItemTypePage"
            }
          }
        }, 
        "summary": "List Item Types", 
        "tags": [
          "Items and Assets"
        ]
      }
    }, 
    "/data/v1/item-types/{item_type_id}": {
      "get": {
        "description": "Get an item type by id.\n\nAn `item_type` represents the class of spacecraft and/or processing level of an item. All items have an associated `item_type`. Each `item_type` has a specific list of `assets_types` that can be derived from the item's source data.\n\n[Learn more about item types](https://developers.planet.com/docs/api/items-assets/#item-types)\n",
        "operationId": "GetItemType", 
        "parameters": [
          {
            "$ref": "#/parameters/pItemTypeID"
          }
        ], 
        "responses": {
          "200": {
            "description": "Item type details.", 
            "schema": {
              "$ref": "#/definitions/ItemType"
            }
          }, 
          "404": {
            "description": "The requested item type does not exist.", 
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }, 
        "summary": "Get Item Type", 
        "tags": [
          "Items and Assets"
        ]
      }
    }, 
    "/data/v1/item-types/{item_type_id}/items/{item_id}": {
      "get": {
        "description": "Get an item by id and item type.\n\nIn the Planet API, an `item` is an entry in our catalog, and generally represents a single logical observation (or scene) captured by a satellite. Each `item` is defined by an `item_type`, which represents the class of spacecraft and/or processing level of the item. Assets (or products, such as visual or analytic) can be derived from the item's source data.\n\n[Learn more about items](https://developers.planet.com/docs/api/items-assets/#items)\n",
        "operationId": "GetItem", 
        "parameters": [
          {
            "$ref": "#/parameters/pItemTypeID"
          }, 
          {
            "$ref": "#/parameters/pItemID"
          }
        ], 
        "responses": {
          "200": {
            "description": "Item details.", 
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }, 
          "404": {
            "description": "The requested item does not exist for the given item type.", 
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }, 
        "summary": "Get Item", 
        "tags": [
          "Items and Assets"
        ]
      }
    }, 
    "/data/v1/item-types/{item_type_id}/items/{item_id}/assets": {
      "get": {
        "description": "List all assets available for an item.\nAn `asset` describes a product that can be derived from an item's source data, and can be used for various analytic, visual or other purposes. These are referred to as `assets_types`.\n\n[Learn more about asset types](https://developers.planet.com/docs/api/items-assets/#assets)\n",
        "operationId": "ListItemAssets", 
        "parameters": [
          {
            "$ref": "#/parameters/pItemTypeID"
          }, 
          {
            "$ref": "#/parameters/pItemID"
          }
        ], 
        "responses": {
          "200": {
            "description": "List of available assets.", 
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }, 
          "404": {
            "description": "The requested item does not exist for the given item type.", 
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }, 
        "summary": "List Item Assets", 
        "tags": [
          "Items and Assets"
        ]
      }
    }, 
    "/data/v1/quick-search": {
      "post": {
        "description": "Executes a structured item search.\n\nThe search APIs allow for both simple and complex `item` searches. Complex searches support boolean conditions, multiple values, geometries using GeoJSON and others. You can also save, retrieve and execute searches that you use frequently for easy use later.\n\n[Learn more about searching](https://developers.planet.com/docs/api/searches-filtering/)\n",
        "operationId": "QuickSearch", 
        "parameters": [
          {
            "description": "The structured search criteria.", 
            "in": "body", 
            "name": "search", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/QuickSearch"
            }
          }, 
          {
            "$ref": "#/parameters/qPageSize"
          }, 
          {
            "$ref": "#/parameters/qSearchResultSort"
          }, 
          {
            "$ref": "#/parameters/qStrict"
          }
        ], 
        "responses": {
          "200": {
            "description": "List of items that match search criteria.", 
            "schema": {
              "$ref": "#/definitions/ItemPage"
            }
          }, 
          "400": {
            "description": "There was an error executing the search.", 
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }, 
        "summary": "Quick Search", 
        "tags": [
          "Item Search"
        ]
      }
    }, 
    "/data/v1/searches": {
      "get": {
        "description": "List all saved searches available to the authenticated user.", 
        "operationId": "ListSearches", 
        "parameters": [
          {
            "$ref": "#/parameters/qPage"
          }, 
          {
            "$ref": "#/parameters/qPageSize"
          }, 
          {
            "$ref": "#/parameters/qSearchSort"
          }, 
          {
            "$ref": "#/parameters/qSearchType"
          }
        ], 
        "responses": {
          "200": {
            "description": "List of saved searches.", 
            "schema": {
              "$ref": "#/definitions/SearchPage"
            }
          }
        }, 
        "summary": "List Saved Searches", 
        "tags": [
          "Item Search"
        ]
      }, 
      "post": {
        "description": "Create a new saved search.", 
        "operationId": "CreateSearch", 
        "parameters": [
          {
            "description": "The structured search criteria.", 
            "in": "body", 
            "name": "search", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/SavedSearch"
            }
          }, 
          {
            "$ref": "#/parameters/qStrict"
          }
        ], 
        "responses": {
          "201": {
            "description": "Saved search details.", 
            "headers": {
              "Location": {
                "description": "The URL for the newly created saved search.", 
                "type": "string"
              }
            }, 
            "schema": {
              "$ref": "#/definitions/Search"
            }
          }, 
          "400": {
            "description": "There was an error creating your saved search.", 
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }, 
        "summary": "Create Saved Search", 
        "tags": [
          "Item Search"
        ]
      }
    }, 
    "/data/v1/searches/{search_id}": {
      "delete": {
        "description": "Delete an existing saved search.", 
        "operationId": "SearchDelete", 
        "parameters": [
          {
            "$ref": "#/parameters/pSearchID"
          }
        ], 
        "responses": {
          "204": {
            "description": "Saved search successfully deleted."
          }, 
          "404": {
            "description": "The requested saved search does not exist.", 
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }, 
        "summary": "Delete Saved Search", 
        "tags": [
          "Item Search"
        ]
      }, 
      "get": {
        "description": "Get a saved search by id.", 
        "operationId": "SearchDetail", 
        "parameters": [
          {
            "$ref": "#/parameters/pSearchID"
          }
        ], 
        "responses": {
          "200": {
            "description": "Saved search details.", 
            "schema": {
              "$ref": "#/definitions/Search"
            }
          }, 
          "404": {
            "description": "The requested saved search does not exist.", 
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }, 
        "summary": "Get Saved Search", 
        "tags": [
          "Item Search"
        ]
      }, 
      "put": {
        "description": "Update an existing saved search.", 
        "operationId": "SearchUpdate", 
        "parameters": [
          {
            "$ref": "#/parameters/pSearchID"
          }, 
          {
            "description": "The structured search criteria.", 
            "in": "body", 
            "name": "search", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/SavedSearch"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Saved search details.", 
            "schema": {
              "$ref": "#/definitions/Search"
            }
          }, 
          "400": {
            "description": "There was an error updating your saved search.", 
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }, 
        "summary": "Update Saved Search", 
        "tags": [
          "Item Search"
        ]
      }
    }, 
    "/data/v1/searches/{search_id}/results": {
      "get": {
        "description": "Executes a saved search.", 
        "operationId": "SearchResults", 
        "parameters": [
          {
            "$ref": "#/parameters/qPage"
          }, 
          {
            "$ref": "#/parameters/qPageSize"
          }, 
          {
            "$ref": "#/parameters/qSearchResultSort"
          }, 
          {
            "$ref": "#/parameters/pSearchID"
          }, 
          {
            "$ref": "#/parameters/qStrict"
          }
        ], 
        "responses": {
          "200": {
            "description": "List of items that match search criteria.", 
            "schema": {
              "$ref": "#/definitions/ItemPage"
            }
          }, 
          "404": {
            "description": "The requested saved search does not exist.", 
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }, 
        "summary": "Run Saved Search", 
        "tags": [
          "Item Search"
        ]
      }
    }, 
    "/data/v1/stats": {
      "post": {
        "description": "Returns a date bucketed histogram of items matching a filter", 
        "operationId": "Stats", 
        "parameters": [
          {
            "description": "The structured search criteria.", 
            "in": "body", 
            "name": "search", 
            "required": true, 
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "List of item stats aggregated over the interval given.", 
            "schema": {
              "$ref": "#/definitions/StatsResults"
            }
          }, 
          "400": {
            "description": "There was an error executing the stats.", 
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }, 
        "summary": "Search Stats", 
        "tags": [
          "Item Stats"
        ]
      }
    }
  }, 
  "produces": [
    "application/json"
  ], 
  "responses": {
    "BadRequest": {
      "description": "Invalid request.", 
      "schema": {
        "$ref": "#/definitions/APIError"
      }
    }, 
    "DeleteResponse": {
      "description": "Response for successful delete operation."
    }, 
    "Error": {
      "description": "Server Error", 
      "schema": {
        "$ref": "#/definitions/APIError"
      }
    }, 
    "Forbidden": {
      "description": "Access denied - insufficient privileges.", 
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }, 
    "General": {
      "description": "Other error.", 
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }, 
    "NotFound": {
      "description": "Item not found.", 
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }, 
    "WriteResponse": {
      "description": "Response for successful write operation.", 
      "schema": {
        "properties": {
          "id": {
            "description": "The id of the newly created mosaic or series.", 
            "type": "string"
          }
        }, 
        "type": "object"
      }
    }
  }, 
  "schemes": [
    "https"
  ], 
  "swagger": "2.0", 
  "x-explorer-enabled": false, 
  "x-samples-enabled": false, 
  "x-samples-languages": [
    "curl"
  ],
  "x-tagGroups": [
    {
      "name": "Data API",
      "tags": ["Items and Assets", "Item Search", "Item Stats"]
    },
    {
      "name": "Mosaics API",
      "tags": ["Basemaps and Mosaics"]
    }
  ] 
}
